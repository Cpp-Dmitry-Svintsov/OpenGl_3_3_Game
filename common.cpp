#include "common.h"


//======================================================================================================================
// Reads a text file and outputs a string with everything in the text file
//======================================================================================================================
std::string Get_File_Contents(const char* filename)
{
	std::ifstream in(filename, std::ios::binary);
	if (in)
	{
		std::string contents;
		in.seekg(0, std::ios::end);
		contents.resize(in.tellg());
		in.seekg(0, std::ios::beg);
		in.read(&contents[0], contents.size());
		in.close();
		return(contents);
	}
	throw(errno);
}

//======================================================================================================================
//======================================================================================================================
//======================================================================================================================
//======================================================================================================================

//===============================================================================================================================
// pos elem for node elem structure
//===============================================================================================================================
SCoord::SCoord()
{}
//-----------------------------------------
SCoord::SCoord(int x, int y)
	:X(x), Y(y)
{}
//-----------------------------------------
bool SCoord::operator<(const SCoord& other) const
{
	return (this->X < other.X || (this->X == other.X && this->Y < other.Y));
}
//-----------------------------------------
bool SCoord::operator==(const SCoord& other) const
{
	return (this->X == other.X && this->Y == other.Y);
}
//-----------------------------------------
bool SCoord::operator!=(const SCoord& other) const
{
	bool res1 = false;
	bool res2 = false;

	if (this->X != other.X)
		res1 = true;

	if (this->Y != other.Y)
		res2 = true;

	if (res1 || res2)
		return true;
	else
		return false;
}
//-----------------------------------------
void SCoord::operator=(const SCoord& other)
{
	this->X = other.X;
	this->Y = other.Y;
}
//===============================================================================================================================
void SCoord::operator+(const SCoord& other)
{
	this->X += other.X;
	this->Y += other.Y;
}
//-----------------------------------------
void SCoord::operator+=(const SCoord& other)
{
	this->X += other.X;
	this->Y += other.Y;
}
//-----------------------------------------
SCoord operator-(SCoord const& c1, SCoord const& c2)
{
	return SCoord(c1.X - c2.X, c2.Y - c2.Y);
}
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================
